<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>secret mode</title>
  <style>
    body {
      background: #111;
      display: flex;
      justify-content: center;
      align-items: flex-start;
      min-height: 100vh;
      margin: 0;
      color: white;
      font-family: Arial, sans-serif;
      user-select: none;
      padding: 20px;
      gap: 30px;
    }
    #tetris {
      border: 4px solid #333;
      background: #222;
      display: grid;
      grid-template-rows: repeat(20, 30px);
      grid-template-columns: repeat(10, 30px);
      gap: 2px;
      position: relative;
    }
    .cell {
      width: 30px;
      height: 30px;
      background: #111;
      border-radius: 4px;
      box-sizing: border-box;
      transition: background 0.2s;
    }
    .filled {
      box-shadow: 0 0 10px;
    }
    .I { background: #0ff; box-shadow-color: #0ff; }
    .J { background: #00f; box-shadow-color: #00f; }
    .L { background: #f60; box-shadow-color: #f60; }
    .O { background: #ff0; box-shadow-color: #ff0; }
    .S { background: #0f0; box-shadow-color: #0f0; }
    .T { background: #a0f; box-shadow-color: #a0f; }
    .Z { background: #f00; box-shadow-color: #f00; }
    /* 그림자 표시 */
    .ghost {
      opacity: 0.3;
      background: #888 !important;
      box-shadow: none !important;
    }

    /* 컨트롤 영역 */
    #sidebar {
      width: 180px;
      display: flex;
      flex-direction: column;
      gap: 20px;
    }
    #score, #level, #hi-score {
      font-size: 20px;
      text-align: center;
    }
    #next, #hold {
      background: #222;
      border: 2px solid #444;
      padding: 10px;
      border-radius: 8px;
      text-align: center;
      user-select: none;
    }
    #next div, #hold div {
      margin-top: 10px;
      display: grid;
      grid-template-columns: repeat(4, 30px);
      grid-template-rows: repeat(4, 30px);
      gap: 2px;
      justify-content: center;
    }
    #next .cell, #hold .cell {
      border-radius: 4px;
      background: #111;
    }
    #instructions {
      font-size: 14px;
      line-height: 1.4;
      color: #ccc;
      user-select: none;
    }
    button {
      padding: 10px;
      font-size: 16px;
      border-radius: 6px;
      border: none;
      background-color: #333;
      color: white;
      cursor: pointer;
      user-select: none;
      transition: background-color 0.2s;
    }
    button:hover {
      background-color: #555;
    }

    /* 모바일 터치 컨트롤 버튼 */
    #mobile-controls {
      position: fixed;
      bottom: 15px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      gap: 10px;
      z-index: 1000;
      user-select: none;
    }
    .control-btn {
      width: 50px;
      height: 50px;
      font-size: 24px;
      background: #333;
      color: white;
      border: none;
      border-radius: 8px;
      box-shadow: 0 0 8px #000;
      touch-action: manipulation;
    }
    @media (min-width: 600px) {
      #mobile-controls {
        display: none; /* PC에서는 숨김 */
      }
    }
  </style>
</head>
<body>
  <div id="tetris"></div>
  <div id="sidebar">
    <div id="score">점수: 0</div>
    <div id="level">레벨: 1</div>
    <div id="hi-score">최고 점수: 0</div>
    <div id="next">
      <b>다음 블록</b>
      <div></div>
    </div>
    <div id="hold">
      <b>홀드</b>
      <div></div>
      <button id="holdBtn">홀드하기 (C)</button>
    </div>
    <button id="pauseBtn">일시정지</button>
    <div id="instructions">
      <b>조작법</b><br />
      ← → : 이동<br />
      ↑ : 회전<br />
      ↓ : 빠르게 내리기<br />
      스페이스 : 즉시 내려놓기<br />
      C : 블록 홀드<br />
      P : 일시정지 / 재개
    </div>
  </div>

  <!-- 모바일 터치 컨트롤 버튼 -->
  <div id="mobile-controls">
    <button id="btn-left" class="control-btn">←</button>
    <button id="btn-right" class="control-btn">→</button>
    <button id="btn-rotate" class="control-btn">↻</button>
    <button id="btn-down" class="control-btn">↓</button>
    <button id="btn-drop" class="control-btn">⤓</button>
    <button id="btn-hold" class="control-btn">홀드</button>
  </div>

  <script>
    (() => {
      const COLS = 10;
      const ROWS = 20;

      const tetris = document.getElementById('tetris');
      const scoreElem = document.getElementById('score');
      const levelElem = document.getElementById('level');
      const hiScoreElem = document.getElementById('hi-score');
      const nextElem = document.querySelector('#next div');
      const holdElem = document.querySelector('#hold div');
      const holdBtn = document.getElementById('holdBtn');
      const pauseBtn = document.getElementById('pauseBtn');

      // 필드 초기화
      let field = [];
      for(let r=0; r<ROWS; r++) {
        field[r] = [];
        for(let c=0; c<COLS; c++) {
          field[r][c] = '';
        }
      }

      // 테트리스 블록 정의
      const TETROMINOS = {
        I: [
          [0,0,0,0],
          [1,1,1,1],
          [0,0,0,0],
          [0,0,0,0],
        ],
        J: [
          [1,0,0],
          [1,1,1],
          [0,0,0],
        ],
        L: [
          [0,0,1],
          [1,1,1],
          [0,0,0],
        ],
        O: [
          [1,1],
          [1,1],
        ],
        S: [
          [0,1,1],
          [1,1,0],
          [0,0,0],
        ],
        T: [
          [0,1,0],
          [1,1,1],
          [0,0,0],
        ],
        Z: [
          [1,1,0],
          [0,1,1],
          [0,0,0],
        ],
      };

      const COLORS = {
        I: 'I',
        J: 'J',
        L: 'L',
        O: 'O',
        S: 'S',
        T: 'T',
        Z: 'Z',
      };

      // 현재 블록, 다음 블록, 홀드 블록
      let current = null;
      let next = null;
      let hold = null;
      let holdUsed = false; // 홀드 한번만 가능

      // 점수, 레벨, 라인
      let score = 0;
      let level = 1;
      let linesCleared = 0;

      // 하이스코어 로드
      let hiScore = localStorage.getItem('tetris_hi_score') || 0;
      hiScoreElem.textContent = `최고 점수: ${hiScore}`;

      // 셀들 생성
      let cells = [];
      for(let r=0; r<ROWS; r++) {
        for(let c=0; c<COLS; c++) {
          let cell = document.createElement('div');
          cell.classList.add('cell');
          tetris.appendChild(cell);
          cells.push(cell);
        }
      }

      // 다음, 홀드 박스 셀 생성 (4x4)
      function createMiniGrid(parent) {
        parent.innerHTML = '';
        for(let i=0; i<16; i++) {
          const cell = document.createElement('div');
          cell.classList.add('cell');
          parent.appendChild(cell);
        }
      }
      createMiniGrid(nextElem);
      createMiniGrid(holdElem);

      // 랜덤 블록 생성
      function randomTetromino() {
        const types = Object.keys(TETROMINOS);
        const randType = types[Math.floor(Math.random() * types.length)];
        return {
          shape: TETROMINOS[randType].map(row => row.slice()),
          x: Math.floor(COLS / 2) - Math.ceil(TETROMINOS[randType][0].length / 2),
          y: 0,
          type: randType,
        };
      }

      // 블록 그리기
      function draw() {
        // 필드 클리어
        for(let r=0; r<ROWS; r++) {
          for(let c=0; c<COLS; c++) {
            let cell = cells[r * COLS + c];
            cell.className = 'cell';
            if(field[r][c]) {
              cell.classList.add
